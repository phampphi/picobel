function Picobel(e) {
    (e = void 0 !== e ? e : {}).theme = e.theme || 'defaultPlayerTheme';
    var t,
        a = ((t = document.getElementsByTagName('audio')), [].slice.call(t)),
        n = (function(t) {
            output = [];
            for (var a = 0; a < t.length; a++)
                (item = {}),
                    (item.url = t[a].src),
                    (item.preload = e.preload ? e.preload : t[a].preload),
                    output.push(item);
            return output;
        })(a);
    !(function(t) {
        for (var n = 0; n < t.length; n++) {
            var s = document.createElement('div');
            s.className = 'customAudioPlayer loading player_' + n;
            var r = a[n].className;
            '' !== r && R(s, r), R(s, e.theme), s.setAttribute('data-song-index', n);
            var d = document.createElement('div');
            (d.className = 'loader'), s.appendChild(d);
            var l = document.createElement('button');
            l.className = 'playerTrigger';
            var o = document.createElement('span');
            (o.className = 'buttonText'), (o.innerHTML = 'play'), l.appendChild(o);
            var i = document.createElement('div');
            i.className = 'metaWrapper';
            var u = document.createElement('span');
            (u.className = 'titleDisplay'), (u.innerHTML = 'File ' + (n + 1)), i.appendChild(u);
            var m = document.createElement('span');
            (m.className = 'artistDisplay'), i.appendChild(m);
            var c = document.createElement('div');
            c.className = 'timingsWrapper';
            var p = document.createElement('span');
            (p.className = 'songPlayTimer'), (p.innerHTML = '0:00'), c.appendChild(p);
            var g = document.createElement('div');
            g.className = 'songProgressSliderWrapper';
            var v = document.createElement('div');
            (v.className = 'pseudoProgressBackground'), g.appendChild(v);
            var h = document.createElement('div');
            (h.className = 'pseudoProgressIndicator'), g.appendChild(h);
            var N = document.createElement('div');
            (N.className = 'pseudoProgressPlayhead'), g.appendChild(N);
            var E = document.createElement('input');
            (E.type = 'range'),
                (E.min = 0),
                (E.max = 100),
                (E.value = 0),
                (E.className = 'songProgressSlider'),
                g.appendChild(E),
                c.appendChild(g);
            var y = document.createElement('span');
            (y.className = 'songDuration'), (y.innerHTML = '-:--'), c.appendChild(y);
            var C = document.createElement('div');
            C.className = 'songVolume';
            var f = document.createElement('button');
            (f.className = 'songMuteButton'), (f.innerHTML = 'Mute'), C.appendChild(f);
            var L = document.createElement('div');
            L.className = 'songVolumeLabelWrapper';
            var P = document.createElement('span');
            (P.className = 'songVolumeLabel'), (P.innerHTML = 'Volume'), L.appendChild(P);
            var T = document.createElement('span');
            (T.className = 'songVolumeValue'),
                (T.innerHTML = '10'),
                L.appendChild(T),
                C.appendChild(L);
            var b = document.createElement('div');
            b.className = 'songVolumeSliderWrapper';
            var M = document.createElement('div');
            (M.className = 'pseudoVolumeBackground'), b.appendChild(M);
            var x = document.createElement('div');
            (x.className = 'pseudoVolumeIndicator'), b.appendChild(x);
            var B = document.createElement('div');
            (B.className = 'pseudoVolumePlayhead'), b.appendChild(B);
            var A = document.createElement('input');
            (A.type = 'range'),
                (A.min = 0),
                (A.max = 1),
                (A.value = 1),
                (A.step = 0.1),
                (A.className = 'songVolumeSlider'),
                b.appendChild(A),
                C.appendChild(b),
                s.appendChild(l),
                s.appendChild(i),
                s.appendChild(c),
                s.appendChild(C),
                t[n].parentNode.replaceChild(s, t[n]);
        }
    })(a);
    var s = document.getElementsByClassName('customAudioPlayer'),
        r = document.getElementsByClassName('playerTrigger'),
        d = document.getElementsByClassName('songMuteButton'),
        l = document.getElementsByClassName('buttonText'),
        o = document.getElementsByClassName('songPlayTimer'),
        u = document.getElementsByClassName('songDuration'),
        m = document.getElementsByClassName('titleDisplay'),
        c = document.getElementsByClassName('artistDisplay'),
        p = document.getElementsByClassName('songProgressSlider'),
        g = document.getElementsByClassName('pseudoProgressPlayhead'),
        v = document.getElementsByClassName('pseudoProgressIndicator'),
        h = document.getElementsByClassName('songVolumeSlider'),
        N = document.getElementsByClassName('songVolumeValue'),
        E = document.getElementsByClassName('pseudoVolumeIndicator'),
        y = document.getElementsByClassName('pseudoVolumePlayhead'),
        C = (function(e) {
            for (var t = [], a = 0; a < e.length; a++)
                (t[a] = new Audio()),
                    e[a].preload && (t[a].preload = e[a].preload),
                    (t[a].src = e[a].url),
                    isNaN(t[a].duration) || (t[a].currentTime = 0),
                    r[a].addEventListener('click', H, !1),
                    p[a].addEventListener('input', b, !1),
                    h[a].addEventListener('input', M, !1),
                    t[a].addEventListener('timeupdate', S, !1),
                    t[a].addEventListener('loadstart', f, !1),
                    t[a].addEventListener('canplaythrough', L, !1),
                    d[a].addEventListener('click', V, !1),
                    t[a].addEventListener('error', D, !1),
                    t[a].addEventListener('stalled', F, !1),
                    t[a].addEventListener('waiting', D, !1),
                    t[a].addEventListener('progress', I, !1),
                    t[a].setAttribute('data-song-index', a);
            return t;
        })(n);
    function f() {}
    function L() {
        var e,
            t,
            n = this.getAttribute('data-song-index');
        (t = W(C[(e = n)].duration)),
            (u[e].innerHTML = t),
            U(s[n], 'loading'),
            (function(e) {
                var t = C[e].src,
                    n = ((l = t), l.substr(2 + (~-l.lastIndexOf('.') >>> 0))),
                    s = ((d = t), d.replace(/^.*[\\\/]/, '').split('.')[0]),
                    r = a[e].title;
                var d;
                var l;
                m[e].innerHTML = '' !== r ? r : s + '.' + n;
                var o = a[e].getAttribute('data-artist');
                '' !== o && (c[e].innerHTML = o);
            })(n);
    }
    function P() {
        for (var e = 0; e < n.length; e++) C[e].pause();
    }
    function T(e) {
        e;
        for (var t = 0; t < n.length; t++) t != e && C[t].pause();
        C[e].play();
    }
    function b() {
        var e = this.value,
            t = this.parentNode.parentNode.parentNode.getAttribute('data-song-index'),
            a = C[t].duration * (e / 100);
        (a = a.toFixed(2)), (C[t].currentTime = a), w(t);
    }
    function M() {
        var e = this.value,
            t = this.parentNode.parentNode.parentNode.getAttribute('data-song-index');
        B(t, !1), x(t, e);
    }
    function x(e, t) {
        var a = 10 * t,
            n = 100 * t;
        (C[e].volume = t),
            (N[e].innerHTML = a),
            (h[e].value = t),
            (E[e].style.width = n + '%'),
            (y[e].style.left = n + '%');
    }
    function B(e, t) {
        var a;
        t
            ? ((a = C[e].volume),
              d[e].setAttribute('data-saved-volume', a),
              x(e, 0),
              R(d[e], 'songMuted'),
              U(d[e], 'songUnmuted'),
              (d[e].innerHTML = 'unmute'))
            : (x(e, void 0 !== (a = d[e].getAttribute('data-saved-volume')) && a > 0 ? a : 1),
              U(d[e], 'songMuted'),
              R(d[e], 'songUnmuted'),
              (d[e].innerHTML = 'mute'));
    }
    function A(e, t) {
        var a = l[e],
            n = r[e];
        if (t) {
            for (i = 0; i < r.length; i++)
                U(r[i], 'songPlaying'), R(r[i], 'songPaused'), (l[i].innerHTML = 'play');
            T(e), R(n, 'songPlaying'), U(n, 'songPaused'), (a.innerHTML = 'pause');
        } else P(), U(n, 'songPlaying'), R(n, 'songPaused'), (a.innerHTML = 'play');
    }
    function H() {
        var e = this.parentNode.getAttribute('data-song-index');
        void 0 !== e ? A(e, !k(this, 'songPlaying')) : console.log('too soon to play!');
    }
    function V() {
        var e = this.parentNode.parentNode.getAttribute('data-song-index');
        l[e];
        k(this, 'songMuted') ? B(e, !1) : B(e, !0);
    }
    function S() {
        w(this.getAttribute('data-song-index'));
    }
    function w(e) {
        var t = C[e].currentTime,
            a = C[e].duration;
        (progressParsed = W(t)),
            (o[e].innerHTML = progressParsed),
            t >= a && U(r[e], 'songPlaying');
        var n = (t / a * 100).toFixed(2);
        (p[e].value = n), (v[e].style.width = n + '%'), (g[e].style.left = n + '%');
    }
    function D(e) {
        this.getAttribute('data-song-index');
    }
    function F(e) {
        A(this.getAttribute('data-song-index'), !1);
    }
    function I(e) {
        var t = this.getAttribute('data-song-index');
        C[t].readyState;
    }
    function W(e) {
        var t = Math.floor((e % 3600) / 60);
        t = (t = t.toFixed(0)).toString();
        var a = Math.floor((e % 3600) % 60);
        return (a = (a = a.toFixed(0)).toString()) < 10 && (a = '0' + a), t + ':' + a;
    }
    function k(e, t) {
        return e.classList
            ? e.classList.contains(t)
            : new RegExp('(^| )' + t + '( |$)', 'gi').test(e.className);
    }
    function R(e, t) {
        e.classList ? e.classList.add(t) : (e.className += ' ' + t);
    }
    function U(e, t) {
        e.classList
            ? e.classList.remove(t)
            : (e.className = e.className.replace(
                  new RegExp('(^|\\b)' + t.split(' ').join('|') + '(\\b|$)', 'gi'),
                  ' '
              ));
    }
    return { sliderScrub: b, playSong: T, pauseAll: P };
}
