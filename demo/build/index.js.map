{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./index.js","webpack:///../esm/helpers.js","webpack:///../esm/new.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","_new","picobel_instance","default","theme","console","log","state","_helpers","parseTime","seconds","hours","Math","floor","mins","toFixed","toString","secs","parsedTime","getFileType","string","substr","lastIndexOf","getFileName","replace","split","findParentIndex","startingElement","dataset","songIndex","parentNode","_helpers2","PicobelSetup","parseOptions","rawOptions","arguments","length","undefined","assign","preload","components","playPause","progress","volume","download","mute","duration","timer","setState","oldState","changes","setComponentsByTheme","themename","rawComponents","defaultComponents","PicobelData","findAudio","audioElements","document","getElementsByTagName","slice","prepareClasses","index","classes","classesArray","classesString","trim","push","getRawData","nodes","map","node","tmpVolume","getMeta","item","meta","url","src","fileType","fileName","title","artist","PicobelMarkup","buildSlider","namespace","min","max","step","wrapper","createElement","background","appendChild","progressIndicator","playhead","type","className","newElement","setLengthDisplay","elements","durationDisplay","innerHTML","setMeta","artistDisplay","titleDisplay","generateMarkup","_newPlayer$classList","newPlayer","classList","add","apply","_toConsumableArray","setAttribute","loading","button","buttonText","meta_title","meta_artist","timings","volume_label_wrapper","volume_label","volume_value","volume_slider","elementHooks","querySelectorAll","playPauseButton","muteButton","playPauseButtonText","playTimer","progressBar","indicator","volumeControl","volumeDisplay","volumeIndicator","volumePlayhead","options","audioNodes","audioFunctions","pauseAll","pause","triggerPlayPauseAudio","event","srcElement","find","playPauseAudio","paused","currentTime","play","remove","triggerUpdateProgress","updateProgress","progressParsed","progressPercent","style","width","left","loadStart","canplaythrough","this","errors","error","stalled","sliderScrub","activeNode","targetTime","setVolume","valueMapped","volumePercent","muteUnmuteAudio","newMarkup","markup","element","replaceChild","addEventListener"],"mappings":"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","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","import Picobel from '../esm/new';\n// import helpers from '../esm/helpers';\n// import 'picobel/css/player.default.css';\n\n// console.log('file loaded');\nlet picobel_instance = Picobel({ theme: 'skeleton' });\n\nconsole.log(picobel_instance.state);\n\n// let slider = helpers.buildSlider('progress', 0, 100, 50);\n// console.dir(slider.children[3]);\n\n// let nodes = picobel_instance.findAudio(document);\n// console.log(nodes);\n// console.log(picobel_instance.state);\n","/**\n * -----------------------------\n * HELPERS\n *\n * These are basic utilities to\n * parse data, add/remove/toggle\n * classes etc.\n * -----------------------------\n */\nconst _helpers = {\n    // Convert seconds into minutes-and-seconds (MMSS) format\n    parseTime: seconds => {\n        let hours = Math.floor(seconds / 3600);\n\n        let mins = Math.floor((seconds % 3600) / 60)\n            .toFixed(0)\n            .toString();\n\n        let secs = Math.floor((seconds % 3600) % 60)\n            .toFixed(0)\n            .toString();\n\n        // Left-pad seconds string if needed\n        secs = secs >= 10 ? secs : `0${secs}`;\n\n        let parsedTime = `${mins}:${secs}`;\n\n        if (hours > 0) {\n            // Left-pad minutes string if needed\n            mins = mins >= 10 ? mins : `0${mins}`;\n            parsedTime = `${hours}:${mins}:${secs}`;\n        }\n\n        return parsedTime;\n    },\n\n    // Get File Type\n    getFileType: string => string.substr((~-string.lastIndexOf('.') >>> 0) + 2),\n\n    // Get File Name\n    getFileName: string => {\n        let fullFileName = string.replace(/^.*[\\\\\\/]/, '');\n        let withNoExtension = fullFileName.split('.')[0];\n        return withNoExtension;\n    },\n\n    // Find parent index (recursively climbs through parents until it finds a\n    // valid index or runs out of elements)\n    findParentIndex: startingElement => {\n        if (typeof startingElement.dataset.songIndex !== 'undefined') {\n            return startingElement.dataset.songIndex;\n        }\n        if (\n            typeof startingElement.parentNode !== 'undefined' &&\n            typeof startingElement.parentNode.dataset !== 'undefined'\n        ) {\n            return _helpers.findParentIndex(startingElement.parentNode);\n        }\n        return false;\n    }\n};\n\nexport default _helpers;\n","import _helpers from './helpers';\n\n/**\n * -----------------------------------------------------------------------------\n *  ____  _           _          _    _\n * |  _ \\(_) ___ ___ | |__   ___| |  (_)___\n * | |_) | |/ __/ _ \\| '_ \\ / _ \\ |  | / __|\n * |  __/| | (_| (_) | |_) |  __/ |_ | \\__ \\\n * |_|   |_|\\___\\___/|_.__/ \\___|_(_)| |___/\n * Picobel.js                       _/ |\n * tomhazledine.com/audio          |__/\n *\n * =============================================================================\n *\n * Replace any native <audio> instances with standard elements (spans, buttons &\n * divs) that we can style however we like.\n *\n * Functionality powered by Web Audio API.\n * -----------------------------------------------------------------------------\n */\n\n/**\n * -----------------------------------------------------------------------------\n * SETUP\n *\n * Parse our options, and set starting state.\n * -----------------------------------------------------------------------------\n */\nexport const PicobelSetup = {\n    // Parse the options on init.\n    parseOptions: (rawOptions = {}) => {\n        // Define our default options.\n        const defaultOptions = {\n            theme: 'default',\n            preload: false,\n            components: {\n                theme: 'default',\n                playPause: true,\n                progress: true,\n                volume: true,\n                download: false,\n                mute: true,\n                duration: true,\n                timer: true\n            }\n        };\n        // Set `options` from arguments, usind `defaultOptions` as fallback.\n        const options = Object.assign(defaultOptions, rawOptions);\n\n        return options;\n    },\n\n    // Update the state.\n    setState: (oldState, changes) => Object.assign(oldState, changes),\n\n    // Return a `components` object that matches the provided themename.\n    setComponentsByTheme: (themename = 'default', rawComponents = {}) => {\n        const defaultComponents = {\n            theme: themename,\n            playPause: true,\n            progress: true,\n            volume: true,\n            download: false,\n            mute: true,\n            duration: true,\n            timer: true\n        };\n        const activeComponents = Object.assign(defaultComponents, rawComponents);\n        return activeComponents;\n    }\n};\n\nexport const PicobelData = {\n    // Return an array of all the <audio> elements found on the page.\n    findAudio: () => {\n        // Get all the <audio> occurrences in the page.\n        let audioElements = document.getElementsByTagName('audio');\n        // Save our audioElements as an array (so we can manipulate the DOM but\n        // still access our items).\n        let items = [].slice.call(audioElements);\n        return items;\n    },\n\n    // Build an array of classes to add to each new \"player\" element\n    prepareClasses: (index, classes, theme) => {\n        const classesString = `customAudioPlayer loading player_${index} ${classes}`;\n        const classesArray = classesString.trim().split(' ');\n        classesArray.push(theme);\n        return classesArray;\n    },\n\n    // Get the url for each audio file we want to load [using elements found by findAudio()]\n    getRawData: nodes =>\n        nodes.map((node, key) => {\n            node.key = key;\n            node.mute = false;\n            node.tmpVolume = 1;\n            return node;\n        }),\n\n    // Get info about the audio track\n    getMeta: item => {\n        let meta = {};\n        // Get the filename and type\n        meta.url = item.src;\n        meta.fileType = _helpers.getFileType(meta.url);\n        meta.fileName = _helpers.getFileName(meta.url);\n        // If there is a valid title, get that title, otherwise get the file name.\n        meta.title = item.title !== '' ? item.title : `${meta.fileName}.${meta.fileType}`;\n        // If there is a valid 'artist', get the artist name.\n        meta.artist = item.dataset.artist ? item.dataset.artist : false;\n        return meta;\n    }\n};\n\nexport const PicobelMarkup = {\n    // Create markup for a custom slider\n    buildSlider: (namespace = 'picobel', min = 0, max = 100, value = 0, step = false) => {\n        // Create a container element to hold all the parts\n        let wrapper = PicobelMarkup.createElement('div', `${namespace}-slider__wrapper`);\n\n        // Create a background div\n        let background = PicobelMarkup.createElement('div', `${namespace}-slider__background`);\n        // Add the background to the container\n        wrapper.appendChild(background);\n\n        // Create a progress indicator\n        let progressIndicator = PicobelMarkup.createElement(\n            'div',\n            `${namespace}-slider__progress-indicator`\n        );\n        wrapper.appendChild(progressIndicator);\n\n        // Create a \"playhead\"\n        let playhead = PicobelMarkup.createElement('div', `${namespace}-slider__playhead`);\n        wrapper.appendChild(playhead);\n\n        // Create an (invisible) input (html range)\n        let progress = PicobelMarkup.createElement('input', `${namespace}-slider__range`);\n        progress.type = 'range';\n        progress.min = min;\n        progress.max = max;\n        progress.value = value;\n        if (step) {\n            progress.step = step;\n        }\n        wrapper.appendChild(progress);\n\n        return wrapper;\n    },\n\n    createElement: (type = 'div', className = '') => {\n        const newElement = document.createElement(type);\n        newElement.className = className;\n        return newElement;\n    },\n\n    // Set the value of the song-length display\n    setLengthDisplay: item => {\n        let duration = _helpers.parseTime(item.duration);\n        item.elements.durationDisplay[0].innerHTML = duration;\n    },\n\n    setMeta: (meta, elements) => {\n        if (meta.artist) {\n            elements.artistDisplay[0].innerHTML = meta.artist;\n        }\n        elements.titleDisplay[0].innerHTML = meta.title;\n    },\n\n    generateMarkup: (nodes = [], components) => {\n        const markupArray = nodes.map(node => {\n            // Create a container for our new player\n            const newPlayer = PicobelMarkup.createElement('div');\n\n            // Set the relevant classes on the new player element\n            const classes = PicobelData.prepareClasses(node.key, node.className, components.theme);\n            newPlayer.classList.add(...classes);\n\n            // Set song index attribute\n            newPlayer.setAttribute('data-song-index', node.key);\n\n            // Create a loading indicator\n            let loading = PicobelMarkup.createElement('div', 'loader');\n            newPlayer.appendChild(loading);\n\n            // TODO: Add \"waiting\" indicator here?\n\n            // -----------------\n            // PLAY/PAUSE BUTTON\n            // -----------------\n            if (components.playPause) {\n                // Create a play/pause button\n                let button = PicobelMarkup.createElement('button', 'playerTrigger');\n                let buttonText = PicobelMarkup.createElement('span', 'buttonText');\n                buttonText.innerHTML = 'play';\n                button.appendChild(buttonText);\n                // Add the button to the player\n                newPlayer.appendChild(button);\n            }\n\n            // ---------\n            // META DATA\n            // ---------\n            // Create a wrapper for our player's metadata\n            let meta = PicobelMarkup.createElement('div', 'metaWrapper');\n\n            // Create elements to display file metadata\n            let meta_title = PicobelMarkup.createElement('span', 'titleDisplay');\n            meta_title.innerHTML = 'File ' + (node.key + 1);\n            meta.appendChild(meta_title);\n\n            let meta_artist = PicobelMarkup.createElement('span', 'artistDisplay');\n            meta.appendChild(meta_artist);\n\n            // Add the metadata to the player\n            newPlayer.appendChild(meta);\n\n            // -----------------------------------\n            // TIMINGS (PROGRESS, DURATION, TIMER)\n            // -----------------------------------\n            if (components.progress || components.duration || components.timer) {\n                let timings = PicobelMarkup.createElement('div', 'timingsWrapper');\n\n                if (components.timer) {\n                    let timer = PicobelMarkup.createElement('span', 'songPlayTimer');\n                    timer.innerHTML = '0:00';\n                    timings.appendChild(timer);\n                }\n\n                if (components.progress) {\n                    let progress = PicobelMarkup.buildSlider('progress', 0, 100, 0);\n                    timings.appendChild(progress);\n                }\n\n                if (components.duration) {\n                    let duration = PicobelMarkup.createElement('span', 'songDuration');\n                    duration.innerHTML = '-:--';\n                    timings.appendChild(duration);\n                }\n\n                // Add the timings to the player\n                newPlayer.appendChild(timings);\n            }\n\n            // ----------------\n            // VOLUME INDICATOR\n            // ----------------\n            if (components.volume || components.mute) {\n                // Volume Indicator\n                let volume = PicobelMarkup.createElement('div', 'songVolume');\n\n                if (components.mute) {\n                    let mute = PicobelMarkup.createElement('button', 'songMuteButton');\n                    mute.innerHTML = 'Mute';\n                    volume.appendChild(mute);\n                }\n\n                if (components.volume) {\n                    let volume_label_wrapper = PicobelMarkup.createElement(\n                        'div',\n                        'songVolumeLabelWrapper'\n                    );\n                    let volume_label = PicobelMarkup.createElement('span', 'songVolumeLabel');\n                    volume_label.innerHTML = 'Volume';\n                    volume_label_wrapper.appendChild(volume_label);\n                    let volume_value = PicobelMarkup.createElement('span', 'songVolumeValue');\n                    volume_value.innerHTML = '10';\n                    volume_label_wrapper.appendChild(volume_value);\n                    volume.appendChild(volume_label_wrapper);\n\n                    let volume_slider = PicobelMarkup.buildSlider('volume', 0, 1, 1, 0.1);\n                    volume.appendChild(volume_slider);\n                }\n                newPlayer.appendChild(volume);\n            }\n\n            return newPlayer;\n        });\n\n        return markupArray;\n    },\n\n    elementHooks: nodes =>\n        nodes.map(node => {\n            let wrapper = document.querySelectorAll(`[data-song-index='${node.key}']`);\n            node.elements = {\n                wrapper: wrapper[0],\n                playPauseButton: wrapper[0].querySelectorAll('.playerTrigger'),\n                muteButton: wrapper[0].querySelectorAll('.songMuteButton'),\n                playPauseButtonText: wrapper[0].querySelectorAll('.buttonText'),\n                playTimer: wrapper[0].querySelectorAll('.songPlayTimer'),\n                durationDisplay: wrapper[0].querySelectorAll('.songDuration'),\n                titleDisplay: wrapper[0].querySelectorAll('.titleDisplay'),\n                artistDisplay: wrapper[0].querySelectorAll('.artistDisplay'),\n                progressBar: wrapper[0].querySelectorAll('.progress-slider__range'),\n                playhead: wrapper[0].querySelectorAll('.progress-slider__playhead'),\n                indicator: wrapper[0].querySelectorAll('.progress-slider__progress-indicator'),\n                volumeControl: wrapper[0].querySelectorAll('.volume-slider__range'),\n                volumeDisplay: wrapper[0].querySelectorAll('.songVolumeValue'),\n                volumeIndicator: wrapper[0].querySelectorAll('.volume-slider__progress-indicator'),\n                volumePlayhead: wrapper[0].querySelectorAll('.volume-slider__playhead')\n            };\n            return node;\n        })\n};\n\nfunction Picobel(rawOptions = {}) {\n    /**\n     * -------------------------------------------------------------------------\n     * RUN THE CODE\n     *\n     * This is where the methods are called. Reading these lines should give you\n     * a step-by-step overview of what Picobel does.\n     * -------------------------------------------------------------------------\n     */\n\n    // Parse the options\n    const options = PicobelSetup.parseOptions(rawOptions);\n\n    // Declare a `state` variable that will hold the active state\n    let state = PicobelSetup.setState({}, { audioNodes: [] });\n\n    // Add options to state\n    state = PicobelSetup.setState(state, {\n        theme: options.theme,\n        components: options.components\n    });\n\n    const _replaceNodes = (audioElements, newMarkup) => {\n        audioElements.map((element, key) => {\n            element.parentNode.replaceChild(newMarkup[key], element);\n        });\n    };\n\n    const _setupLocalListeners = nodes =>\n        nodes.map((node, key) => {\n            // Audio event listeners\n            node.addEventListener('timeupdate', audioFunctions.triggerUpdateProgress, false);\n            node.addEventListener('loadstart', audioFunctions.loadStart, false);\n            node.addEventListener('canplaythrough', audioFunctions.canplaythrough, false);\n            node.addEventListener('error', audioFunctions.errors, false);\n            node.addEventListener('stalled', audioFunctions.stalled, false);\n            node.addEventListener('waiting', audioFunctions.errors, false);\n            node.addEventListener('progress', audioFunctions.progress, false);\n\n            // DOM interaction event listeners\n            node.elements.playPauseButton[0].addEventListener(\n                'click',\n                audioFunctions.triggerPlayPauseAudio,\n                false\n            );\n            node.elements.progressBar[0].addEventListener(\n                'input',\n                audioFunctions.sliderScrub,\n                false\n            );\n            node.elements.volumeControl[0].addEventListener('input', audioFunctions.volume, false);\n            node.elements.muteButton[0].addEventListener(\n                'click',\n                audioFunctions.muteUnmuteAudio,\n                false\n            );\n            return node;\n        });\n\n    const audioFunctions = {\n        pauseAll: () => {\n            const paused = state.audioNodes.map(node => {\n                audioFunctions.pause(node);\n            });\n        },\n        triggerPlayPauseAudio: event => {\n            let index = _helpers.findParentIndex(event.srcElement);\n            let node = state.audioNodes.find(node => node.key == index);\n            audioFunctions.playPauseAudio(node);\n        },\n        playPauseAudio: node => {\n            if (node.paused || node.currentTime === 0) {\n                audioFunctions.pauseAll();\n                audioFunctions.play(node);\n            } else {\n                audioFunctions.pause(node);\n            }\n        },\n        play: node => {\n            node.play();\n            let button = node.elements.playPauseButton[0];\n            button.classList.remove('songPaused');\n            button.classList.add('songPlaying');\n        },\n        pause: node => {\n            node.pause();\n            let button = node.elements.playPauseButton[0];\n            button.classList.remove('songPlaying');\n            button.classList.add('songPaused');\n        },\n        triggerUpdateProgress: event => audioFunctions.updateProgress(event.srcElement),\n\n        updateProgress: node => {\n            let progress = node.currentTime;\n            let duration = node.duration;\n            let progressParsed = _helpers.parseTime(progress);\n            node.elements.playTimer[0].innerHTML = progressParsed;\n            if (progress >= duration) {\n                node.elements.playPauseButton[0].classList.remove('songPlaying');\n            }\n            let progressPercent = (progress / duration * 100).toFixed(2);\n            node.elements.progressBar[0].value = progressPercent;\n            // console.log(node.elements.indicator);\n            node.elements.indicator[0].style.width = progressPercent + '%';\n            node.elements.playhead[0].style.left = progressPercent + '%';\n        },\n        loadStart: () => {\n            // console.log('loadStart');\n        },\n        canplaythrough: function() {\n            PicobelMarkup.setLengthDisplay(this);\n            this.elements.wrapper.classList.remove('loading');\n            let meta = PicobelData.getMeta(this);\n            PicobelMarkup.setMeta(meta, this.elements);\n        },\n        errors: error => {\n            // console.log(error);\n        },\n        stalled: () => {\n            // console.log('stalled');\n        },\n        progress: () => {\n            // console.log('progress');\n        },\n        sliderScrub: event => {\n            let index = _helpers.findParentIndex(event.srcElement);\n            let activeNode = state.audioNodes.find(node => node.key == index);\n            let duration = activeNode.duration;\n            let targetTime = duration * (event.srcElement.value / 100);\n            targetTime = targetTime.toFixed(2);\n            activeNode.currentTime = targetTime;\n            audioFunctions.updateProgress(activeNode);\n        },\n        volume: event => {\n            let index = _helpers.findParentIndex(event.srcElement);\n            let node = state.audioNodes.find(node => node.key == index);\n            let volume = event.srcElement.value;\n            audioFunctions.mute(node, false);\n            audioFunctions.setVolume(node, volume);\n        },\n        setVolume: (node, value) => {\n            let valueMapped = value * 10;\n            let volumePercent = value * 100;\n            node.volume = value;\n            node.elements.volumeDisplay[0].innerHTML = valueMapped;\n            node.elements.volumeControl[0].value = value;\n            node.elements.volumeIndicator[0].style.width = volumePercent + '%';\n            node.elements.volumePlayhead[0].style.left = volumePercent + '%';\n        },\n        muteUnmuteAudio: event => {\n            let index = _helpers.findParentIndex(event.srcElement);\n            let node = state.audioNodes.find(node => node.key == index);\n            node.mute = !node.mute;\n            audioFunctions.mute(node, node.mute);\n        },\n        mute: (node, mute) => {\n            // node.mute = !mute;\n            let button = node.elements.muteButton[0];\n            if (node.mute) {\n                node.tmpVolume = node.volume;\n                audioFunctions.setVolume(node, 0);\n                button.classList.add('songMuted');\n                button.classList.remove('songUnmuted');\n                button.innerHTML = 'unmute';\n            } else {\n                if (typeof node.tmpVolume != 'undefined' && node.tmpVolume > 0) {\n                    audioFunctions.setVolume(node, node.tmpVolume);\n                } else {\n                    audioFunctions.setVolume(node, 1);\n                }\n                button.classList.remove('songMuted');\n                button.classList.add('songUnmuted');\n                button.innerHTML = 'mute';\n            }\n        }\n    };\n\n    // Set `components` based on theme (but overridden by explicit `options`).\n    state.components = PicobelSetup.setComponentsByTheme(state.theme, rawOptions.components);\n\n    // Get audio elements from page, and save their details to state.\n    state.audioNodes = PicobelData.findAudio();\n\n    state.audioNodes = PicobelData.getRawData(state.audioNodes);\n\n    // Build markup for each element, based on `components`\n    const markup = PicobelMarkup.generateMarkup(state.audioNodes, state.components);\n\n    // Replace audio elements in DOM with new markup\n    _replaceNodes(state.audioNodes, markup);\n\n    // Save new DOM elements to our node list\n    state.audioNodes = PicobelMarkup.elementHooks(state.audioNodes);\n\n    // Setup event listeners\n    state.audioNodes = _setupLocalListeners(state.audioNodes);\n\n    return {\n        state\n    };\n}\n\nexport default Picobel;\n"],"sourceRoot":""}